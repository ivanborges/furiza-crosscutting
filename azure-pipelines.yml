pool:
  vmImage: 'VS2017-Win2016'

trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

  #Pack1 -------------------
  ##Caching
  ##Caching.Abstractions
  ##Newtonsoft.Json
  Pack1Version: '1.0.3'
  Pack1PushToNuget: False

  #Pack2 -------------------
  ##Logging
  ##Extensions.Configuration
  Pack2Version: '1.0.2'
  Pack2PushToNuget: True

  #Pack3 -------------------
  ##Extensions.Enumerable
  Pack3Version: '1.0.1'
  Pack3PushToNuget: False

steps:
# Install NuGet Tool
- task: NuGetToolInstaller@0
  displayName: Install NuGet Tool

# Restore NuGet packages
- task: NuGetCommand@2
  displayName: Restore NuGet Packages
  inputs:
    restoreSolution: '$(solution)'

# Build solution
- task: VSBuild@1
  displayName: Build Solution
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

# Run unit tests
- task: VSTest@2
  displayName: Run Unit Tests
  inputs:
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

# Prepare publish files
- task: DotNetCoreCLI@2
  displayName: Prepare Publish Files
  inputs:
    command: publish
    publishWebProjects: False
    projects: '**/**/Furiza.*.csproj'
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: False

# Publish the artifacts
- task: PublishBuildArtifacts@1
  displayName: Publish Artifacts

# Publish Furiza.Caching to NuGet.org
- task: DotNetCoreCLI@2
  displayName: Pack Furiza.Caching
  condition: eq(variables['Pack1PushToNuget'], 'True')
  inputs:
    command: pack
    packagesToPack: '**/**/Furiza.Caching.csproj'
    versioningScheme: byEnvVar
    versionEnvVar: Pack1Version
- task: NuGetCommand@2
  displayName: Push Furiza.Caching to NuGet.org
  condition: eq(variables['Pack1PushToNuget'], 'True')
  continueOnError: True
  inputs:
    command: push
    nuGetFeedType: external
    packagesToPush: '$(build.artifactStagingDirectory)/Furiza.Caching.*.nupkg'
    publishFeedCredentials: 'apikey-nuget-crosscutting-caching'

# Publish Furiza.Caching.Abstractions to NuGet.org
- task: DotNetCoreCLI@2
  displayName: Pack Furiza.Caching.Abstractions
  condition: eq(variables['Pack1PushToNuget'], 'True')
  inputs:
    command: pack
    packagesToPack: '**/**/Furiza.Caching.Abstractions.csproj'
    versioningScheme: byEnvVar
    versionEnvVar: Pack1Version
- task: NuGetCommand@2
  displayName: Push Furiza.Caching.Abstractions to NuGet.org
  condition: eq(variables['Pack1PushToNuget'], 'True')
  continueOnError: True
  inputs:
    command: push
    nuGetFeedType: external
    packagesToPush: '$(build.artifactStagingDirectory)/Furiza.Caching.Abstractions.*.nupkg'
    publishFeedCredentials: 'apikey-nuget-crosscutting-caching.abstractions'

# Publish Furiza.Extensions.Configuration to NuGet.org
- task: DotNetCoreCLI@2
  displayName: Pack Furiza.Extensions.Configuration
  condition: eq(variables['Pack2PushToNuget'], 'True')
  inputs:
    command: pack
    packagesToPack: '**/**/Furiza.Extensions.Configuration.csproj'
    versioningScheme: byEnvVar
    versionEnvVar: Pack2Version
- task: NuGetCommand@2
  displayName: Push Furiza.Extensions.Configuration to NuGet.org
  condition: eq(variables['Pack2PushToNuget'], 'True')
  continueOnError: True
  inputs:
    command: push
    nuGetFeedType: external
    packagesToPush: '$(build.artifactStagingDirectory)/Furiza.Extensions.Configuration.*.nupkg'
    publishFeedCredentials: 'apikey-nuget-crosscutting-extensions.configuration'

# Publish Furiza.Extensions.Enumerable to NuGet.org
- task: DotNetCoreCLI@2
  displayName: Pack Furiza.Extensions.Enumerable
  condition: eq(variables['Pack3PushToNuget'], 'True')
  inputs:
    command: pack
    packagesToPack: '**/**/Furiza.Extensions.Enumerable.csproj'
    versioningScheme: byEnvVar
    versionEnvVar: Pack3Version
- task: NuGetCommand@2
  displayName: Push Furiza.Extensions.Enumerable to NuGet.org
  condition: eq(variables['Pack3PushToNuget'], 'True')
  continueOnError: True
  inputs:
    command: push
    nuGetFeedType: external
    packagesToPush: '$(build.artifactStagingDirectory)/Furiza.Extensions.Enumerable.*.nupkg'
    publishFeedCredentials: 'apikey-nuget-crosscutting-extensions.enumerable'

# Publish Furiza.Logging to NuGet.org
- task: DotNetCoreCLI@2
  displayName: Pack Furiza.Logging
  condition: eq(variables['Pack2PushToNuget'], 'True')
  inputs:
    command: pack
    packagesToPack: '**/**/Furiza.Logging.csproj'
    versioningScheme: byEnvVar
    versionEnvVar: Pack2Version
- task: NuGetCommand@2
  displayName: Push Furiza.Logging to NuGet.org
  condition: eq(variables['Pack2PushToNuget'], 'True')
  continueOnError: True
  inputs:
    command: push
    nuGetFeedType: external
    packagesToPush: '$(build.artifactStagingDirectory)/Furiza.Logging.*.nupkg'
    publishFeedCredentials: 'apikey-nuget-crosscutting-logging'

# Publish Furiza.Newtonsoft.Json to NuGet.org
- task: DotNetCoreCLI@2
  displayName: Pack Furiza.Newtonsoft.Json
  condition: eq(variables['Pack1PushToNuget'], 'True')
  inputs:
    command: pack
    packagesToPack: '**/**/Furiza.Newtonsoft.Json.csproj'
    versioningScheme: byEnvVar
    versionEnvVar: Pack1Version
- task: NuGetCommand@2
  displayName: Push Furiza.Newtonsoft.Json to NuGet.org
  condition: eq(variables['Pack1PushToNuget'], 'True')
  continueOnError: True
  inputs:
    command: push
    nuGetFeedType: external
    packagesToPush: '$(build.artifactStagingDirectory)/Furiza.Newtonsoft.Json.*.nupkg'
    publishFeedCredentials: 'apikey-nuget-crosscutting-newtonsoft.json'
